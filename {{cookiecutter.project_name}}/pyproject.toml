[project]
name = "{{cookiecutter.project_name}}"
version = "0.1.0"
description = "Add your description here."
readme = "README.md"
authors = [
    { name = "{{cookiecutter.author}}", email = "{{cookiecutter.email}}" }
]
requires-python = ">=3.13,<4.0"
dependencies = []

[project.urls]
Homepage = "https://{{cookiecutter.author_github_handle}}.github.io/{{cookiecutter.project_name}}/"
Repository = "https://github.com/{{cookiecutter.author_github_handle}}/{{cookiecutter.project_name}}/"
Documentation = "https://{{cookiecutter.author_github_handle}}.github.io/{{cookiecutter.project_name}}/"

[project.scripts]
x = "x:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest>=7.2.0",
    "pre-commit>=2.20.0",
    "tox-uv>=1.11.3",
    "mypy>=0.991",
    "ruff>=0.6.9",
    "poethepoet",
]

[tool.mypy]
files = ["{{cookiecutter.project_slug}}"]
disallow_untyped_defs = "True"
disallow_any_unimported = "True"
no_implicit_optional = "True"
check_untyped_defs = "True"
warn_return_any = "True"
warn_unused_ignores = "True"
show_error_codes = "True"

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
line-length = 88
fix = true

[tool.ruff.lint]
select = [
    "E", "W", # pycodestyle
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    # "D",      # pydocstyle
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    # "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    # "S",     # flake8-bandit
    # "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "C4",    # flake8-comprehensions
    "T10",   # flake8-debugger
    "G",     # flake8-logging-format
    "PIE",   # flake8-pie
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "SIM",   # flake8-simplify
    "TCH",   # flake8-type-checking
    "PTH",   # flake8-use-pathlib
    "PGH",   # pygrep-hooks
    "PERF",  # perflint
    "TRY",   # tryceratops
    "RUF"    # ruff-specific rules
]
ignore = [
    "C408",   # unnecessary-collection-call
    "PT015",  # pytest-assert-always-false
    "SIM118", # in-dict-keys
    "PTH109", # os-getcwd
    "PTH123", # builtin-open
    "RUF012", # mutable-class-default
    "E501", # LineTooLong
    "E731", # DoNotAssignLambda
]
fixable = [ "E","F","I"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.format]
preview = true

[tool.poe.tasks]
[tool.poe.tasks.install]
help = "Install the virtual environment and install the pre-commit hooks"
sequence =["_uv_install", "_precommit_install"]

[tool.poe.tasks._uv_install]
cmd = "uv sync"

[tool.poe.tasks._precommit_install]
cmd ="uv run pre-commit install"

[tool.poe.tasks.check]
help = "Run code quality tools"
{%- if cookiecutter.deptry == 'y' %}
sequence = [ "_uv_lock", "_precommit_run", "mypy", "deptry"]
{%- else %}
sequence = [ "_uv_lock", "_precommit_run", "mypy"]
{%- endif %}

[tool.poe.tasks.all]
help = "Run all checks & tests"
sequence = [ "check", "test" ]

[tool.poe.tasks.ruff-lint]
help = "Run ruff fixer on code base"
cmd  = "uv run ruff check ."

[tool.poe.tasks.ruff-fix]
help = "Run ruff fixer on code base"
cmd  = "uv run ruff check . --fix-only"

[tool.poe.tasks.format]
help = "Run formatter on the code base"
cmd  = "uv run ruff --format"

[tool.poe.tasks._uv_lock]
cmd = "uv lock --locked"

[tool.poe.tasks._precommit_run]
cmd ="uv run pre-commit run -a"

[tool.poe.tasks.mypy]
help = "Run mypy"
cmd = "uv run mypy src"

{%- if cookiecutter.deptry == 'y' %}
[tool.poe.tasks.deptry]
help = "ðŸš€ Checking for obsolete dependencies: Running deptry"
cmd = "uv run deptry ."
{%- endif %}

[tool.poe.tasks.test]
help = "Test code with pytest"
{%- if cookiecutter.codecov == "y" %}
cmd = "uv run python -m pytest --cov --cov-config=pyproject.toml --cov-report=xml"
{%- else %}
cmd = "uv run python -m pytest --doctest-modules"
{%- endif %}

[tool.poe.tasks.test-quick]
help = "Run unit and feature tests, excluding slow ones"
cmd  = "uv run python -m pytest -m 'not slow and not integration'"

[tool.poe.tasks.clean]
help = "Remove generated files"
cmd  = """
rm -rf .coverage
        .mypy_cache
        .pytest_cache
        ./**/__pycache__
        dist
        htmlcov
        ./docs/_build
"""

[tool.poe.tasks.build]
help = "Build wheel file"
sequence = [ "_build_clean", "_wheel" ]

[tool.poe.tasks._build_clean]
help = "Clean build artifacts"
cmd = "uv run python -c 'import shutil; import os; shutil.rmtree('dist') if os.path.exists('dist') else None'"

[tool.poe.tasks._wheel]
help = "Build wheel file"
cmd = "uvx --from build pyproject-build --installer uv"

[tool.poe.tasks.publish]
help = "Publish a release to PyPI."
cmd = "uvx twine upload --repository-url https://upload.pypi.org/legacy/ dist/*"

[tool.poe.tasks.build_and_publish]
help = "Build and publish"
sequence = ["build", "publish"]

{%- if cookiecutter.mkdocs == "y" %}
[tool.poe.tasks.docs_test]
help = "Test if documentation can be built without errors"
cmd = "uv run mkdocs build -s"

[tool.poe.tasks.docs]
help = "Build and serve documentation"
cmd = "uv run mkdocs serve"
{%- endif %}

[tool.poe.tasks.run]
help = "Run the main application"
cmd = "uv run python src/{{cookiecutter.project_slug}}/main.py"
